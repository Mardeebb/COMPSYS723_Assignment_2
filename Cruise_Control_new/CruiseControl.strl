module CruiseControl:

constant Zero : float;
constant SpeedMin : float;
constant SpeedMax : float;
constant SpeedInc : float;
constant PedalsMin : float;
constant CruiseSpeedTest : float;
constant SpeedTest : float;
   
% Inputs
input On, Off, Resume, Set, QuickAccel, QuickDecel;
input Accel : float;
input Brake : float;
input Speed : float;

% Outputs
output CruiseSpeed : float;
output ThrottleCmd : float;
output CruiseStateOut : integer;

% external functions
function regulateThrottle(integer, float, float) : float;

% Cruise control state values:
% OFF = 1, ON = 2, STDBY = 3, DISABLE = 4

%{
	CruiseControlState = Signal to communicate the state that the cruise control is in
	CruiseSpeedSig = Signal to communicate the current cruise speed with the throttle regulator
}%
signal CruiseControlState : integer,
CruiseSpeedSig : float
in
trap InitDone in
  loop
    emit ThrottleCmd(Zero);
    emit CruiseSpeedSig(Zero);
    exit InitDone;
  end loop
end trap;
[

% CruiseStateManager -  Controls the state of operation
var CruiseState:= 1 : integer in
	loop
		if CruiseState = 1 then
			present 
			case On do
				CruiseState := 2;
			end present;
		elsif CruiseState = 2 then 
			present
			case Off do 
				CruiseState := 1;
			end present;
			
			if  ?Accel > PedalsMin or ?Speed < SpeedMin or ?Speed > SpeedMax then
				CruiseState := 4;
			elsif ?Brake > PedalsMin then
				CruiseState := 3;
			end if;
		elsif CruiseState = 3 then
			present 
			case Off do 
				CruiseState := 1;
			end present;
			
			if ?Accel > PedalsMin or ?Speed < SpeedMin or ?Speed > SpeedMax then 
				CruiseState := 4;
			elsif ?Brake < PedalsMin and ?Speed > SpeedMin and ?Speed < SpeedMax then
				CruiseState := 2;
			end if;
		elsif CruiseState = 4 then
			present
			case Off do 
				CruiseState := 1;
			end present;
		
			if ?Accel < PedalsMin and ?Speed >= SpeedMin and ?Speed <= SpeedMax then
				CruiseState := 2;
			end if;
			
		end if;
		
		% Emit state every tick
		if CruiseState = 1 then 
			emit CruiseStateOut(1); % OFF
			emit CruiseControlState(1);		
		elsif CruiseState = 2 then 
			emit CruiseStateOut(2); % ON
			emit CruiseControlState(2);
		elsif CruiseState = 3 then 
			emit CruiseStateOut(3); % STDBY
			emit CruiseControlState(3);
		elsif CruiseState = 4 then 
			emit CruiseStateOut(4); % DISABLE
			emit CruiseControlState(4);
		end if;	
		
	
		pause;
	end loop
end var
]
||
% CruiseSpeedManager - Controls the cruise speed
[
var CurrentCruiseSpeed := Zero : float, 
OldCruiseSpeed := Zero : float
in
	loop
		if ?CruiseControlState = 1 then
			emit CruiseSpeed(Zero);
		elsif ?CruiseControlState = 2 then
			
			if (?CruiseControlState = 2) and (pre(?CruiseControlState) = 1) then
				CurrentCruiseSpeed := ?Speed;
			end if; 
			
			present 
			case Set do 
				CurrentCruiseSpeed := ?Speed;
				if CurrentCruiseSpeed > SpeedMax then
					CurrentCruiseSpeed := SpeedMax;
				elsif CurrentCruiseSpeed < SpeedMin then
					CurrentCruiseSpeed := SpeedMin;
				end if;
				
			case QuickAccel do
				CurrentCruiseSpeed := CurrentCruiseSpeed + SpeedInc;
				if CurrentCruiseSpeed >= SpeedMax then
					CurrentCruiseSpeed := SpeedMax;
				end if;
			case QuickDecel do
				CurrentCruiseSpeed := CurrentCruiseSpeed - SpeedInc;
				if CurrentCruiseSpeed <= SpeedMin then
					CurrentCruiseSpeed := SpeedMin;
				end if;
			case Resume do 
				CurrentCruiseSpeed := OldCruiseSpeed;
			end present;
			
			emit CruiseSpeedSig(CurrentCruiseSpeed);
			emit CruiseSpeed(CurrentCruiseSpeed);
			
		elsif ?CruiseControlState = 3 then
		if (?CruiseControlState = 3) and (not pre(?CruiseControlState) = 3) then
			OldCruiseSpeed := CurrentCruiseSpeed;
		end if;
		
			present
			case Set do 
				CurrentCruiseSpeed := ?Speed;
				if CurrentCruiseSpeed > SpeedMax then
					CurrentCruiseSpeed := SpeedMax;
				elsif CurrentCruiseSpeed < SpeedMin then
					CurrentCruiseSpeed := SpeedMin;
				end if;
				
			case QuickAccel do
				CurrentCruiseSpeed := CurrentCruiseSpeed + SpeedInc;
				if CurrentCruiseSpeed >= SpeedMax then
					CurrentCruiseSpeed := SpeedMax;
				end if;
			case QuickDecel do
				CurrentCruiseSpeed := CurrentCruiseSpeed - SpeedInc;
				if CurrentCruiseSpeed <= SpeedMin then
					CurrentCruiseSpeed := SpeedMin;
				end if;
			case Resume do 
				CurrentCruiseSpeed := OldCruiseSpeed;
			end present;
			
			emit CruiseSpeed(CurrentCruiseSpeed);
			
		elsif ?CruiseControlState = 4 then
		if (?CruiseControlState = 4) and (not pre(?CruiseControlState) = 4) then
			OldCruiseSpeed := CurrentCruiseSpeed;
		end if;
			present
			case Set do 
				CurrentCruiseSpeed := ?Speed;
				if CurrentCruiseSpeed > SpeedMax then
					CurrentCruiseSpeed := SpeedMax;
				elsif CurrentCruiseSpeed < SpeedMin then
					CurrentCruiseSpeed := SpeedMin;
				end if;
				
			case QuickAccel do
				CurrentCruiseSpeed := CurrentCruiseSpeed + SpeedInc;
				if CurrentCruiseSpeed >= SpeedMax then
					CurrentCruiseSpeed := SpeedMax;
				end if;
			case QuickDecel do
				CurrentCruiseSpeed := CurrentCruiseSpeed - SpeedInc;
				if CurrentCruiseSpeed <= SpeedMin then
					CurrentCruiseSpeed := SpeedMin;
				end if;
			case Resume do 
				emit CruiseSpeed(OldCruiseSpeed);
			end present;
			
			emit CruiseSpeed(CurrentCruiseSpeed);
		end if;
		pause;
	end loop
end var
]
||
% ThrottlerRegulator - Controls the regulation of the throttle
[
	loop
	pause;
		if ?CruiseControlState = 1 then
			emit ThrottleCmd(?Accel);
		elsif ((?CruiseControlState = 2) and (not pre(?CruiseControlState) = 2)) then
			emit ThrottleCmd(regulateThrottle(1, ?CruiseSpeedSig, ?Speed));
		elsif ?CruiseControlState = 2 then
			emit ThrottleCmd(regulateThrottle(0, ?CruiseSpeedSig, ?Speed));
		else
			emit ThrottleCmd(?Accel);
		end if;
	end loop 
]
end signal
end module


